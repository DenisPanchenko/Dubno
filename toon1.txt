
uniform sampler2D quadTexture;
uniform float width;
uniform float height;
varying vec2 vTex;

vec4 get_pixel(vec2 coords, float dx, float dy) {
 return texture2D(quadTexture,coords + vec2(dx, dy));
}

vec3 Color(in vec2 coords){
  
  float dxtex = 1.0 /width ;
  float dytex = 1.0 /height;
  vec3 pix[9];
  int k = -1;
  vec3 dt = vec3(1.0,1.0,1.0); 

  //const float bb = 0.6;

// read neighboring pixel intensities
  for (int i=-1; i<2; i++) {
   for(int j=-1; j<2; j++) {
    k++;
    pix[k] = vec3(get_pixel(coords,float(i)*dxtex, float(j)*dytex));
   }
  }

  float d1=dot(abs(pix[0]-pix[8]),dt);
  float d2=dot(abs(pix[2]-pix[6]),dt);
  float hl=dot(abs(pix[1]-pix[7]),dt);
  float vl=dot(abs(pix[5]-pix[3]),dt);
  float d = 0.5*(d1+d2+hl+vl)/(dot(pix[4],dt)+0.15);  
  

  float lc = 4.0*length(pix[4]);
  float f = fract(lc); f*=f;
  lc = 0.25*(floor(lc) + f*f)+0.05;
  pix[4] = 4.0*normalize(pix[4]); 
  vec3 frct = fract(pix[4]); frct*=frct;
  pix[4] = floor(pix[4])+ 0.05*dt + frct*frct;

  vec3 color = 0.25*lc*(1.1-d*sqrt(d))*pix[4];
  return color;
  
  //return vec3(1.0);
}

void main()
{

	gl_FragColor.xyz = Color(vTex);
}